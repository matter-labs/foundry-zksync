use foundry_test_utils::{casttest, util::OutputExt, ZkSyncNode};

const PAYMASTER_BYTECODE: &str = "0x0002000000000002000300000000000200000000030100190000006003300270000001080330019700010000003103550000008004000039000000400040043f00000001002001900000002d0000c13d000000040030008c000000380000413d000000000201043b000000e0022002700000010e0020009c0000003c0000213d000001120020009c000000760000613d000001130020009c000000b80000613d000001140020009c0000010b0000c13d0000000001000416000000000001004b0000010b0000c13d000000000100041a0000010a021001970000000005000411000000000052004b0000010d0000c13d0000010901100197000000000010041b0000000001000414000001080010009c0000010801008041000000c0011002100000010b011001c70000800d0200003900000003030000390000010c040000410000000006000019041c04120000040f00000001002001900000003a0000c13d0000010b0000013d0000000001000416000000000001004b0000010b0000c13d0000000006000411000000000006004b000000610000c13d0000011701000041000000000010043f000000040000043f00000116010000410000041e00010430000000000003004b0000010b0000c13d00000000010000190000041d0001042e0000010f0020009c000000dd0000613d000001100020009c000001030000613d000001110020009c0000010b0000c13d000000240030008c0000010b0000413d0000000002000416000000000002004b0000010b0000c13d0000000401100370000000000101043b0000010a0010009c0000010b0000213d000000000200041a0000010a032001970000000005000411000000000053004b0000010d0000c13d0000010a06100198000000330000613d0000010901200197000000000161019f000000000010041b0000000001000414000001080010009c0000010801008041000000c0011002100000010b011001c70000800d0200003900000003030000390000010c04000041041c04120000040f00000001002001900000003a0000c13d0000010b0000013d000000000100041a0000010902100197000000000262019f000000000020041b00000000020004140000010a05100197000001080020009c0000010802008041000000c0012002100000010b011001c70000800d0200003900000003030000390000010c04000041041c04120000040f00000001002001900000010b0000613d0000002001000039000001000010044300000120000004430000010d010000410000041d0001042e000000640030008c0000010b0000413d0000004402100370000000000402043b000001190040009c0000010b0000213d00000000054300490000011a0050009c0000010b0000213d000002640050008c0000010b0000413d0000000002000411000080010020008c000001170000c13d0000022402400039000000000621034f000000000606043b000000230550008a00000124076001970000012408500197000000000987013f000000000087004b00000000070000190000012407004041000000000056004b00000000050000190000012405008041000001240090009c000000000705c019000000000007004b0000010b0000c13d00000004044000390000000005640019000000000451034f000000000404043b000001190040009c0000010b0000213d0000000006430049000000200350003900000124056001970000012407300197000000000857013f000000000057004b00000000050000190000012405004041000000000063004b00000000060000190000012406002041000001240080009c000000000506c019000000000005004b0000010b0000c13d000000030040008c000001730000213d0000011f01000041000000800010043f0000002001000039000000840010043f0000003a01000039000000a40010043f0000013d01000041000000c40010043f0000013e01000041000000e40010043f00000123010000410000041e00010430000000240030008c0000010b0000413d0000000002000416000000000002004b0000010b0000c13d0000000401100370000000000301043b0000010a0030009c0000010b0000213d000000000100041a0000010a021001970000000001000411000000000012004b000001120000c13d000300000003001d0000011b010000410000000000100443000000000100041000000004001004430000000001000414000001080010009c0000010801008041000000c0011002100000011c011001c70000800a02000039041c04170000040f0000000100200190000001bb0000613d00000003020000290000010a04200197000000000301043b0000000001000414000000040040008c000001230000c13d00000001020000390000000001000031000001320000013d000000c40030008c0000010b0000413d0000000402100370000000000202043b000001190020009c0000010b0000213d0000002304200039000000000034004b0000010b0000813d0000000404200039000000000441034f000000000404043b000001190040009c0000010b0000213d00000000024200190000002402200039000000000032004b0000010b0000213d0000002402100370000000000202043b000001190020009c0000010b0000213d00000000022300490000011a0020009c0000010b0000213d000002640020008c0000010b0000413d0000008401100370000000000101043b000000010010008c0000010b0000213d0000000001000411000080010010008c00000000010000390000000101006039041c03fa0000040f00000000010000190000041d0001042e0000000001000416000000000001004b0000010b0000c13d000000000100041a0000010a01100197000000800010043f00000118010000410000041d0001042e00000000010000190000041e000104300000011501000041000000000010043f000000040050043f00000116010000410000041e000104300000011502000041000000000020043f000000040010043f00000116010000410000041e000104300000011f01000041000000800010043f0000002001000039000000840010043f0000002401000039000000a40010043f0000012101000041000000c40010043f0000012201000041000000e40010043f00000123010000410000041e00010430000001080010009c0000010801008041000000c001100210000000000003004b0000012a0000c13d00000000020400190000012d0000013d0000010b011001c700008009020000390000000005000019041c04120000040f00010000000103550000006001100270000001080010019d0000010801100197000000000001004b0000014a0000c13d00000001002001900000003a0000c13d000000400100043d00000064021000390000011d03000041000000000032043500000044021000390000011e0300004100000000003204350000002402100039000000280300003900000000003204350000011f020000410000000000210435000000040210003900000020030000390000000000320435000001080010009c0000010801008041000000400110021000000120011001c70000041e00010430000001190010009c000001b50000213d0000001f041000390000013f044001970000003f044000390000013f05400197000000400400043d0000000005540019000000000045004b00000000060000390000000106004039000001190050009c000001b50000213d0000000100600190000001b50000c13d000000400050043f00000000061404360000013f031001980000001f0410018f00000000013600190000000105000367000001650000613d000000000705034f000000007807043c0000000006860436000000000016004b000001610000c13d000000000004004b000001340000613d000000000335034f0000000304400210000000000501043300000000054501cf000000000545022f000000000303043b0000010004400089000000000343022f00000000034301cf000000000353019f0000000000310435000001340000013d000000000331034f000000000303043b0000012503300197000001260030009c000001bc0000c13d000001c00320008a000000000331034f000001800220008a000000000121034f000000000201043b000000000103043b000300000002001d00000000031200a9000200000001001d000000000001004b000001860000613d00000002013000fa000000030010006b000001c80000c13d0000000b01000039000000800010043f0000012a02000041000000a00020043f0000012b02000041000000e00020043f0000004002000039000000e40020043f000001240010043f000001440100043d0000012c011001970000012a011001c7000001440010043f0000014f0000043f000100000003001d000001040030043f0000008401000039000000c00010043f0000018001000039000000400010043f0000000001000414000001080010009c0000010801008041000000c0011002100000012d011001c70000012e02000041041c04170000040f00000000020100190000006002200270000001080020019d00010000000103550000011b010000410000000000100443000000000100041000000004001004430000000001000414000001080010009c0000010801008041000000c0011002100000011c011001c70000800a02000039041c04170000040f0000000100200190000001bb0000613d000000400400043d0000012f0040009c000001ce0000413d0000012901000041000000000010043f0000004101000039000000040010043f00000116010000410000041e00010430000000000001042f0000011f01000041000000800010043f0000002001000039000000840010043f0000002e01000039000000a40010043f0000012701000041000000c40010043f0000012801000041000000e40010043f00000123010000410000041e000104300000012901000041000000000010043f0000001101000039000000040010043f00000116010000410000041e00010430000000000301043b0000004001400039000000400010043f00000020054000390000013001000041000000000015043500000007010000390000000000140435000000400100043d00000020021000390000012b0600004100000000006204350000002406100039000000400700003900000000007604350000000004040433000000640610003900000000004604350000013f084001970000001f0740018f0000008406100039000000000065004b000001f50000813d000000000008004b000001f10000613d000000000a7500190000000009760019000000200990008a000000200aa0008a000000000b890019000000000c8a0019000000000c0c04330000000000cb0435000000200880008c000001eb0000c13d000000000007004b0000020b0000613d0000000009060019000002010000013d0000000009860019000000000008004b000001fe0000613d000000000a050019000000000b06001900000000ac0a0434000000000bcb043600000000009b004b000001fa0000c13d000000000007004b0000020b0000613d00000000058500190000000307700210000000000809043300000000087801cf000000000878022f00000000050504330000010007700089000000000575022f00000000057501cf000000000585019f000000000059043500000000056400190000000000050435000000440510003900000000003504350000001f034000390000013f05000041000000000353016f00000064043000390000000000410435000000a303300039000000000453016f0000000003140019000000000043004b00000000040000390000000104004039000001190030009c000001b50000213d0000000100400190000001b50000c13d000000400030043f000001080020009c000001080200804100000040022002100000000001010433000001080010009c00000108010080410000006001100210000000000121019f0000000002000414000001080020009c0000010802008041000000c002200210000000000121019f0000012e02000041041c04170000040f00000000020100190000006002200270000001080020019d0001000000010355000000400300043d000001310030009c000001b50000213d0000004001300039000000400010043f00000020043000390000013201000041000000000014043500000009010000390000000000130435000000400100043d00000020021000390000012b05000041000000000052043500000024051000390000004006000039000000000065043500000000030304330000006405100039000000000035043500000000050004160000013f083001970000001f0730018f0000008406100039000000000064004b0000025c0000813d000000000008004b000002580000613d000000000a7400190000000009760019000000200990008a000000200aa0008a000000000b890019000000000c8a0019000000000c0c04330000000000cb0435000000200880008c000002520000c13d000000000007004b000002720000613d0000000009060019000002680000013d0000000009860019000000000008004b000002650000613d000000000a040019000000000b06001900000000ac0a0434000000000bcb043600000000009b004b000002610000c13d000000000007004b000002720000613d00000000048400190000000307700210000000000809043300000000087801cf000000000878022f00000000040404330000010007700089000000000474022f00000000047401cf000000000484019f000000000049043500000000046300190000000000040435000000440410003900000000005404350000001f033000390000013f05000041000000000353016f00000064043000390000000000410435000000a303300039000000000453016f0000000003140019000000000043004b00000000040000390000000104004039000001190030009c000001b50000213d0000000100400190000001b50000c13d000000400030043f000001080020009c000001080200804100000040022002100000000001010433000001080010009c00000108010080410000006001100210000000000121019f0000000002000414000001080020009c0000010802008041000000c002200210000000000121019f0000012e02000041041c04170000040f00000000020100190000006002200270000001080020019d0001000000010355000000400300043d000001310030009c000001b50000213d0000004001300039000000400010043f00000020043000390000013301000041000000000014043500000008010000390000000000130435000000400100043d00000020021000390000012b0500004100000000005204350000002405100039000000400600003900000000006504350000000003030433000000640510003900000000003504350000013f073001970000001f0630018f0000008405100039000000000054004b000002c20000813d000000000007004b000002be0000613d00000000096400190000000008650019000000200880008a000000200990008a000000000a780019000000000b790019000000000b0b04330000000000ba0435000000200770008c000002b80000c13d000000000006004b000002d80000613d0000000008050019000002ce0000013d0000000008750019000000000007004b000002cb0000613d0000000009040019000000000a050019000000009b090434000000000aba043600000000008a004b000002c70000c13d000000000006004b000002d80000613d00000000047400190000000306600210000000000708043300000000076701cf000000000767022f00000000040404330000010006600089000000000464022f00000000046401cf000000000474019f0000000000480435000000000453001900000000000404350000004404100039000000030500002900000000005404350000001f033000390000013f05000041000000000353016f00000064043000390000000000410435000000a303300039000000000453016f0000000003140019000000000043004b00000000040000390000000104004039000001190030009c000001b50000213d0000000100400190000001b50000c13d000000400030043f000001080020009c000001080200804100000040022002100000000001010433000001080010009c00000108010080410000006001100210000000000121019f0000000002000414000001080020009c0000010802008041000000c002200210000000000121019f0000012e02000041041c04170000040f00000000020100190000006002200270000001080020019d0001000000010355000000400300043d000001310030009c000001b50000213d0000004001300039000000400010043f00000020043000390000013401000041000000000014043500000008010000390000000000130435000000400100043d00000020021000390000012b0500004100000000005204350000002405100039000000400600003900000000006504350000000003030433000000640510003900000000003504350000013f073001970000001f0630018f0000008405100039000000000054004b000003290000813d000000000007004b000003250000613d00000000096400190000000008650019000000200880008a000000200990008a000000000a780019000000000b790019000000000b0b04330000000000ba0435000000200770008c0000031f0000c13d000000000006004b0000033f0000613d0000000008050019000003350000013d0000000008750019000000000007004b000003320000613d0000000009040019000000000a050019000000009b090434000000000aba043600000000008a004b0000032e0000c13d000000000006004b0000033f0000613d00000000047400190000000306600210000000000708043300000000076701cf000000000767022f00000000040404330000010006600089000000000464022f00000000046401cf000000000474019f0000000000480435000000000453001900000000000404350000004404100039000000020500002900000000005404350000001f033000390000013f05000041000000000353016f00000064043000390000000000410435000000a303300039000000000453016f0000000003140019000000000043004b00000000040000390000000104004039000001190030009c000001b50000213d0000000100400190000001b50000c13d000000400030043f000001080020009c000001080200804100000040022002100000000001010433000001080010009c00000108010080410000006001100210000000000121019f0000000002000414000001080020009c0000010802008041000000c002200210000000000121019f0000012e02000041041c04170000040f00000000020100190000006002200270000001080020019d00010000000103550000000001000414000001080010009c0000010801008041000000c001100210000000010000006b0000036f0000c13d0000800102000039000003740000013d0000010b011001c70000800902000039000080010400003900000001030000290000000005000019041c04120000040f000100000001035500000000030100190000006003300270000001080030019d00000108033001980000039b0000c13d000000400100043d0000000100200190000003c10000613d0000002002100039000000400300003900000000003204350000013c0200004100000000002104350000004003100039000000600200043d00000000002304350000013f052001970000001f0420018f0000006003100039000000810030008c000003d70000413d000000000005004b000003960000613d000000000743001900000060064001bf000000200770008a0000000008570019000000000956001900000000090904330000000000980435000000200550008c000003900000c13d000000000004004b000003ed0000613d00000080050000390000000006030019000003e30000013d0000001f0430003900000135044001970000003f044000390000013604400197000000400500043d0000000004450019000000000054004b00000000060000390000000106004039000001190040009c000001b50000213d0000000100600190000001b50000c13d000000400040043f0000001f0430018f000000000635043600000137053001980000000003560019000003b30000613d000000000701034f000000007807043c0000000006860436000000000036004b000003af0000c13d000000000004004b0000037b0000613d000000000151034f0000000304400210000000000503043300000000054501cf000000000545022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000151019f00000000001304350000037b0000013d00000084021000390000013803000041000000000032043500000064021000390000013903000041000000000032043500000044021000390000013a0300004100000000003204350000002402100039000000530300003900000000003204350000011f020000410000000000210435000000040210003900000020030000390000000000320435000001080010009c000001080100804100000040011002100000013b011001c70000041e000104300000000006530019000000000005004b0000008009000039000003e00000613d000000000703001900000000980904340000000007870436000000000067004b000003dc0000c13d000000000004004b000003ed0000613d00000080055000390000000304400210000000000706043300000000074701cf000000000747022f00000000050504330000010004400089000000000545022f00000000044501cf000000000474019f00000000004604350000001f042000390000013f04400197000000000232001900000000000204350000006002400039000001080020009c00000108020080410000006002200210000001080010009c00000108010080410000004001100210000000000112019f0000041d0001042e000000000001004b000003fd0000613d000000000001042d000000400100043d0000006402100039000001220300004100000000003204350000004402100039000001210300004100000000003204350000002402100039000000240300003900000000003204350000011f020000410000000000210435000000040210003900000020030000390000000000320435000001080010009c0000010801008041000000400110021000000120011001c70000041e00010430000000000001042f00000415002104210000000102000039000000000001042d0000000002000019000000000001042d0000041a002104230000000102000039000000000001042d0000000002000019000000000001042d0000041c000004320000041d0001042e0000041e00010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff02000000000000000000000000000000000000000000000000000000000000008be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000817b17ef00000000000000000000000000000000000000000000000000000000817b17f0000000000000000000000000000000000000000000000000000000008da5cb5b00000000000000000000000000000000000000000000000000000000f2fde38b00000000000000000000000000000000000000000000000000000000038a24bc0000000000000000000000000000000000000000000000000000000051cff8d900000000000000000000000000000000000000000000000000000000715018a6118cdaa70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000001e4fbdf7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000800000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9cc7f708afc65944829bd487b90b72536b1951864fbfc14e125fc972a6507f390200000200000000000000000000000000000024000000000000000000000000796d61737465722e0000000000000000000000000000000000000000000000004661696c656420746f2077697468647261772066756e64732066726f6d20706108c379a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000840000000000000000000000004f6e6c7920626f6f746c6f616465722063616e2063616c6c2074686973206d6574686f640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000840000008000000000000000008000000000000000000000000000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000000000008c5a344500000000000000000000000000000000000000000000000000000000556e737570706f72746564207061796d617374657220666c6f7720696e207061796d6173746572506172616d732e0000000000000000000000000000000000004e487b710000000000000000000000000000000000000000000000000000000072657175697265644554480000000000000000000000000000000000000000009710a9d0000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000084000000e00000000000000000000000000000000000000000000000000000000000636f6e736f6c652e6c6f67000000000000000000000000000000000000000000000000ffffffffffffffc062616c616e636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffbf6d73672e76616c7565000000000000000000000000000000000000000000000067617350726963650000000000000000000000000000000000000000000000006761734c696d697400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ffffffe000000000000000000000000000000000000000000000000000000003ffffffe000000000000000000000000000000000000000000000000000000000ffffffe069676874206e6f7420626520656e6f7567682e0000000000000000000000000020426f6f746c6f616465722e205061796d61737465722062616c616e6365206d4661696c656420746f207472616e736665722074782066656520746f2074686500000000000000000000000000000000000000a4000000000000000000000000038a24bc00000000000000000000000000000000000000000000000000000000546865207374616e64617264207061796d617374657220696e707574206d757374206265206174206c656173742034206279746573206c6f6e67000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0665706818478a33d2e5c855cee339a5e2954659335637b967b7e5433b81a588b";

const COUNTER_BYTECODE: &str = "0x0000008003000039000000400030043f0000000100200190000000150000c13d000000000201001900000010002001980000002d0000613d000000000101043b000000e001100270000000110010009c000000200000613d000000120010009c0000002d0000c13d0000000001000416000000000001004b0000002d0000c13d000000000100041a000000ff0110018f000000800010043f0000001501000041000000370001042e0000000001000416000000000001004b0000002d0000c13d000000000200041a0000001601200197000000000010041b0000002001000039000001000010044300000120000004430000000f01000041000000370001042e0000000001000416000000000001004b0000002d0000c13d000000000100041a000000ff0210018f000000ff0020008c0000002f0000c13d0000001301000041000000000010043f0000001101000039000000040010043f000000140100004100000038000104300000000001000019000000380001043000000016021001970000000101100039000000ff0110018f000000000121019f000000000010041b0000000001000019000000370001042e0000003600000432000000370001042e0000003800010430000000000000000000000000000000000000000000000000000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000fffffffc00000000000000000000000000000000000000000000000000000000000000000000000000000000d09de08a000000000000000000000000000000000000000000000000000000008381f58a4e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000020000000800000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000027b95d8697efbdb44a7508247e8c640a64fb3ead050f40cb23deb1910c501315";

casttest!(test_zk_cast_using_paymaster, async |_prj, cmd| {
    let node = ZkSyncNode::start().await;
    let url = node.url();

    // This test seems to require a specific private key, so we use the hard-coded one.
    let (addr, private_key) = (
        "0x36615Cf349d7F6344891B1e7CA7C72883F5dc049".to_string(),
        "0x7726827caac94a7f9e1b160f7ea819f172f7b6f9d2a97f992c38edeab82d4110".to_string(),
    );

    // Deploy paymaster
    cmd.args([
        "rpc",
        "hardhat_setCode",
        "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        PAYMASTER_BYTECODE,
        "--rpc-url",
        &url,
    ])
    .assert_success();

    // Deploy counter
    cmd.cast_fuse()
        .args([
            "rpc",
            "hardhat_setCode",
            "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
            COUNTER_BYTECODE,
            "--rpc-url",
            &url,
        ])
        .assert_success();

    // Fund the paymaster
    cmd.cast_fuse()
        .args([
            "send",
            "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
            "0x",
            "--value",
            "0.1ether",
            "--private-key",
            &private_key,
            "--rpc-url",
            &url,
        ])
        .assert_success();

    let balance_before = cmd
        .cast_fuse()
        .args(["balance", &addr, "--rpc-url", &url])
        .assert_success()
        .get_output()
        .stdout_lossy();

    // Test cast estimate with paymaster params
    let output = cmd
        .cast_fuse()
        .args([
            "estimate",
            "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
            "increment()",
            "--private-key",
            &private_key,
            "--rpc-url",
            &url,
            "--zk-paymaster-address",
            "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
            "--zk-paymaster-input",
            "0x8c5a344500000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000",
        ])
        .assert_success()
        .get_output()
        .stdout_lossy();

    let output: u32 = output.trim().parse().unwrap();
    assert!(output > 0);

    // Interact with the counter using the paymaster
    cmd.cast_fuse().args([
        "send",
        "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
        "increment()",
        "--private-key",
        &private_key,
        "--zk-paymaster-address",
        "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "--zk-paymaster-input",
        "0x8c5a344500000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000",
        "--rpc-url",
        &url
    ])
    .assert_success();

    let balance_after = cmd
        .cast_fuse()
        .args(["balance", &addr, "--rpc-url", &url])
        .assert_success()
        .get_output()
        .stdout_lossy();

    assert_eq!(balance_after, balance_before);
});

casttest!(test_zk_cast_without_paymaster, async |_prj, cmd| {
    let node = ZkSyncNode::start().await;
    let url = node.url();

    let (addr, private_key) = ZkSyncNode::rich_wallets()
        .next()
        .map(|(addr, pk, _)| (addr, pk))
        .expect("No rich wallets available");

    // Deploy counter
    cmd.cast_fuse()
        .args([
            "rpc",
            "hardhat_setCode",
            "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
            COUNTER_BYTECODE,
            "--rpc-url",
            &url,
        ])
        .assert_success();

    let balance_before = cmd
        .cast_fuse()
        .args(["balance", addr, "--rpc-url", &url])
        .assert_success()
        .get_output()
        .stdout_lossy();

    cmd.cast_fuse()
        .args([
            "send",
            "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
            "increment()",
            "--private-key",
            private_key,
            "--rpc-url",
            &url,
            "--gas-price",
            "1000000000000002",
        ])
        .assert_success();

    let balance_after = cmd
        .cast_fuse()
        .args(["balance", addr, "--rpc-url", &url])
        .assert_success()
        .get_output()
        .stdout_lossy();

    assert!(balance_after != balance_before);
});

// tests that `cast estimate --create` is working correctly.
casttest!(test_zk_cast_estimate_contract_deploy_gas, async |_prj, cmd| {
    let node = ZkSyncNode::start().await;
    let url = node.url();

    let addr = "0x36615Cf349d7F6344891B1e7CA7C72883F5dc049";

    let output = cmd
        .args([
            "estimate",
            "--rpc-url",
            &url,
            "--from",
            addr,
            "--zksync",
            "--create",
            COUNTER_BYTECODE,
        ])
        .assert_success()
        .get_output()
        .stdout_lossy();

    let output: u32 = output.trim().parse().unwrap();
    assert!(output > 0);

    // empty contract with constructor(uint256) function
    let bytecode_with_constructor = "000000600310027000000010033001970000000100200190000000130000c13d0000008002000039000000400020043f000000040030008c000000330000413d000000000101043b0000001401100197000000150010009c000000330000c13d0000000001000416000000000001004b000000330000c13d000000000100041a000000800010043f00000016010000410000003d0001042e0000000002000416000000000002004b000000330000c13d0000001f0230003900000011022001970000008002200039000000400020043f0000001f0430018f00000012053001980000008002500039000000240000613d0000008006000039000000000701034f000000007807043c0000000006860436000000000026004b000000200000c13d000000000004004b000000310000613d000000000151034f0000000304400210000000000502043300000000054501cf000000000545022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000151019f0000000000120435000000200030008c000000350000813d00000000010000190000003e00010430000000800100043d000000000010041b00000020010000390000010000100443000001200000044300000013010000410000003d0001042e0000003c000004320000003d0001042e0000003e00010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000001ffffffe000000000000000000000000000000000000000000000000000000000ffffffe00000000200000000000000000000000000000040000001000000000000000000ffffffff000000000000000000000000000000000000000000000000000000008381f58a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000800000000000000000";

    let output = cmd
        .cast_fuse()
        .args([
            "estimate",
            "--rpc-url",
            &url,
            "--from",
            addr,
            "--zksync",
            "--create",
            bytecode_with_constructor,
            "constructor(uint256)",
            "1",
        ])
        .assert_success()
        .get_output()
        .stdout_lossy();

    let output: u32 = output.trim().parse().unwrap();
    assert!(output > 0);
});

casttest!(test_zk_cast_mktx, async |_prj, cmd| {
    let node = ZkSyncNode::start().await;
    let url = node.url();

    let (_, private_key) = ZkSyncNode::rich_wallets()
        .next()
        .map(|(addr, pk, _)| (addr, pk))
        .expect("No rich wallets available");

    let output = cmd
        .cast_fuse()
        .args([
            "mktx",
            "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
            "deposit()",
            "--rpc-url",
            &url,
            "--private-key",
            private_key,
            "--zksync",
        ])
        .assert_success()
        .get_output()
        .stdout_lossy();

    assert!(output.contains("0x71f88580808402b275d08304d71894c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28084d0e30db001a0649623b32d669de5124b623cdf0c181fdc12d218904cf3e8e2e7ba6065966fc0a05721be7b129e744a23f425c7fd89bfc236a22d2d74215e8617abef506807b57782010494bc989fde9e54cad2ab4392af6df60f04873a033a80c08080"));
});

// tests that `cast mktx --create` is working correctly.
casttest!(test_zk_cast_mktx_contract_deploy, async |_prj, cmd| {
    let node = ZkSyncNode::start().await;
    let url = node.url();

    let (_, private_key) = ZkSyncNode::rich_wallets()
        .next()
        .map(|(addr, pk, _)| (addr, pk))
        .expect("No rich wallets available");

    let output = cmd
        .cast_fuse()
        .args([
            "mktx",
            "--rpc-url",
            &url,
            "--private-key",
            private_key,
            "--zksync",
            "--create",
            COUNTER_BYTECODE,
        ])
        .assert_success()
        .get_output()
        .stdout_lossy();

    let output: String = output.trim().parse().unwrap();
    assert!(output.contains("0x71f9042b80808402b275d08347794594000000000000000000000000000000000000800680b8849c4d535b000000000000000000000000000000000000000000000000000000000000000001000019f13e9e0a78abba31b36765bc5e4f708fdafc71b075be12759645331a0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000001a089c310d2d24b3a60b0bc0ad10d61d2e7c5ceec3b9ddc24c90855ae2f993e7213a05e74a8a7ad5533ce84769f5e0a7555a67db49047549f10dc2b90a835e883e0c982010494bc989fde9e54cad2ab4392af6df60f04873a033a80f90323b903200000008003000039000000400030043f0000000100200190000000150000c13d000000000201001900000010002001980000002d0000613d000000000101043b000000e001100270000000110010009c000000200000613d000000120010009c0000002d0000c13d0000000001000416000000000001004b0000002d0000c13d000000000100041a000000ff0110018f000000800010043f0000001501000041000000370001042e0000000001000416000000000001004b0000002d0000c13d000000000200041a0000001601200197000000000010041b0000002001000039000001000010044300000120000004430000000f01000041000000370001042e0000000001000416000000000001004b0000002d0000c13d000000000100041a000000ff0210018f000000ff0020008c0000002f0000c13d0000001301000041000000000010043f0000001101000039000000040010043f000000140100004100000038000104300000000001000019000000380001043000000016021001970000000101100039000000ff0110018f000000000121019f000000000010041b0000000001000019000000370001042e0000003600000432000000370001042e0000003800010430000000000000000000000000000000000000000000000000000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000fffffffc00000000000000000000000000000000000000000000000000000000000000000000000000000000d09de08a000000000000000000000000000000000000000000000000000000008381f58a4e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000020000000800000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000027b95d8697efbdb44a7508247e8c640a64fb3ead050f40cb23deb1910c5013158080"));

    // empty contract with constructor(uint256) function
    let bytecode_with_constructor = "000000600310027000000010033001970000000100200190000000130000c13d0000008002000039000000400020043f000000040030008c000000330000413d000000000101043b0000001401100197000000150010009c000000330000c13d0000000001000416000000000001004b000000330000c13d000000000100041a000000800010043f00000016010000410000003d0001042e0000000002000416000000000002004b000000330000c13d0000001f0230003900000011022001970000008002200039000000400020043f0000001f0430018f00000012053001980000008002500039000000240000613d0000008006000039000000000701034f000000007807043c0000000006860436000000000026004b000000200000c13d000000000004004b000000310000613d000000000151034f0000000304400210000000000502043300000000054501cf000000000545022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000151019f0000000000120435000000200030008c000000350000813d00000000010000190000003e00010430000000800100043d000000000010041b00000020010000390000010000100443000001200000044300000013010000410000003d0001042e0000003c000004320000003d0001042e0000003e00010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000001ffffffe000000000000000000000000000000000000000000000000000000000ffffffe00000000200000000000000000000000000000040000001000000000000000000ffffffff000000000000000000000000000000000000000000000000000000008381f58a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000800000000000000000";

    let output = cmd
        .cast_fuse()
        .args([
            "mktx",
            "--rpc-url",
            &url,
            "--private-key",
            private_key,
            "--zksync",
            "--create",
            bytecode_with_constructor,
            "constructor(uint256)",
            "1",
        ])
        .assert_success()
        .get_output()
        .stdout_lossy();
    let output: String = output.trim().parse().unwrap();
    assert!(output.contains("0x71f9042b80808402b275d0834f1a3294000000000000000000000000000000000000800680b8c49c4d535b00000000000000000000000000000000000000000000000000000000000000000100001753a6058ee6b135c0bf29d821eb3c4ab45fe41974c42a57806aa2532900000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000024767b619000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000080a0e6c5a319958537e07cce12150cf2b0528b705b964f5fa2e483d43d559b7b3a65a0026ac9ce5d5fc411b57a390128b9a8d86d26ac22ec0b6dbfdda3f1139181736582010494bc989fde9e54cad2ab4392af6df60f04873a033a80f902e3b902e0000000600310027000000010033001970000000100200190000000130000c13d0000008002000039000000400020043f000000040030008c000000330000413d000000000101043b0000001401100197000000150010009c000000330000c13d0000000001000416000000000001004b000000330000c13d000000000100041a000000800010043f00000016010000410000003d0001042e0000000002000416000000000002004b000000330000c13d0000001f0230003900000011022001970000008002200039000000400020043f0000001f0430018f00000012053001980000008002500039000000240000613d0000008006000039000000000701034f000000007807043c0000000006860436000000000026004b000000200000c13d000000000004004b000000310000613d000000000151034f0000000304400210000000000502043300000000054501cf000000000545022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000151019f0000000000120435000000200030008c000000350000813d00000000010000190000003e00010430000000800100043d000000000010041b00000020010000390000010000100443000001200000044300000013010000410000003d0001042e0000003c000004320000003d0001042e0000003e00010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000001ffffffe000000000000000000000000000000000000000000000000000000000ffffffe00000000200000000000000000000000000000040000001000000000000000000ffffffff000000000000000000000000000000000000000000000000000000008381f58a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000008000000000000000008080"))
});
