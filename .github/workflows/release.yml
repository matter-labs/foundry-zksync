name: release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  REPO_NAME: ${{ github.repository_owner }}/foundry-zksync

jobs:
  prepare:
    name: Prepare release
    runs-on: ubuntu-latest 
    outputs:
        tag_name: ${{ steps.extract_version.outputs.VERSION }} 
        release_name: ${{ steps.compute_release_name.outputs.release_name }}
    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Extract version
        id: extract_version
        run: echo "VERSION=${GITHUB_REF_NAME#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Compute release name
        id: compute_release_name
        run: echo "release_name=foundry-zksync@${{ steps.extract_version.outputs.VERSION }}" >> $GITHUB_OUTPUT

  build:
    name: Build and package ${{ matrix.target }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: prepare
    strategy:
        matrix:
            include:
                # `os`: GHA runner
                # `target`: Rust build target triple
                # `platform` and `arch`: Used in tarball names
                # `svm`: target platform to use for the Solc binary: https://github.com/roynalnaruto/svm-rs/blob/84cbe0ac705becabdc13168bae28a45ad2299749/svm-builds/build.rs#L4-L24
                - os: ubuntu-20.04
                  target: x86_64-unknown-linux-gnu
                  svm_target_platform: linux-amd64
                  platform: linux
                # TODO: fix aarch64 build
                # - os: ubuntu-20.04
                #   target: aarch64-unknown-linux-gnu
                #   svm_target_platform: linux-aarch64
                #   platform: linux
                #   arch: arm64
                - os: macos-latest
                  target: x86_64-apple-darwin
                  svm_target_platform: macosx-amd64
                  platform: darwin
                - os: macos-latest
                  target: aarch64-apple-darwin
                  svm_target_platform: macosx-aarch64
                  platform: darwin
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
            targets: ${{ matrix.target }}

      - name: Install required Rust targets
        run: rustup target add ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
            key: ${{ matrix.target }}
            cache-on-failure: true

      - name: Apple M1 setup
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
            echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
            echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV
      - name: Linux ARM setup
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
            sudo apt-get update -y
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "C_INCLUDE_PATH=/usr/aarch64-linux-gnu/include" >> $GITHUB_ENV
            echo "CPLUS_INCLUDE_PATH=/usr/aarch64-linux-gnu/include" >> $GITHUB_ENV

      - name: Build binaries
        env:
            SVM_TARGET_PLATFORM: ${{ matrix.svm_target_platform }}
            RUST_BACKTRACE: full
        shell: bash
        run: |
          cargo build --release --bin zkforge --bin zkcast --target ${{ matrix.target }}

      - name: List files in artifacts directory
        run: |
          mkdir -p artifacts
          mv target/${{ matrix.target }}/release/* ./artifacts

      - name: Create artifacts
        run: |
          cd artifacts
          tar -czf foundry-zksync-${{ needs.prepare.outputs.tag_name }}-${{ matrix.target }}.tar.gz *
          mv foundry-zksync-${{ needs.prepare.outputs.tag_name }}-${{ matrix.target }}.tar.gz ../
          echo "ARTIFACT=foundry-zksync-${{ needs.prepare.outputs.tag_name }}-${{ matrix.target }}.tar.gz" >> $GITHUB_OUTPUT
  
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: foundry-zksync-${{ needs.prepare.outputs.tag_name }}-${{ matrix.target }}.tar.gz
          path: foundry-zksync-${{ needs.prepare.outputs.tag_name }}-${{ matrix.target }}.tar.gz

  create-draft-release:
    name: Create draft release
    runs-on: ubuntu-latest
    needs: [prepare, build]
    env:
      VERSION:  ${{ needs.prepare.outputs.tag_name }}
    permissions:
      # Required to post the release
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Generate full changelog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 ${{ env.VERSION }}^)..${{ env.VERSION }})" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        
      - name: Generate list of contributors
        id: contributors
        run: |
          echo "CONTRIBUTORS<<EOF" >> $GITHUB_OUTPUT
          echo "$(git log --pretty=format:"- %aN (%aE)" $(git describe --tags --abbrev=0 ${{ env.VERSION }}^)..${{ env.VERSION }} | sort | uniq)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release draft
        env:
          GITHUB_USER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # The formatting here is borrowed from reth which borrowed it from Lighthouse (which is borrowed from OpenEthereum): https://github.com/openethereum/openethereum/blob/main/.github/workflows/build.yml
        run: |
          body=$(cat <<- "ENDBODY"

          ## 📋 Summary
          
          ### 🐛 Bug Fixes:
          - TBD
          
          ### ✨ New Features:
          - TBD
          
          ### ⚠️ Breaking Changes:
          - TBD
          
          ## 📜 All Changes
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## ⭐ Contributors
          
          ${{ steps.contributors.outputs.CONTRIBUTORS }}
          
          ## 📥 Binaries
          
          | System | Architecture | Binary |
          |:---:|:---:|:---:|
          | <img src="https://simpleicons.org/icons/linux.svg" style="width: 32px;"/> | x86_64 | [foundry-zksync-${{ needs.prepare.outputs.tag_name }}-x86_64-unknown-linux-gnu.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ needs.prepare.outputs.tag_name }}/${{ needs.prepare.outputs.tag_name }}-x86_64-unknown-linux-gnu.tar.gz) | 
          | <img src="https://simpleicons.org/icons/apple.svg" style="width: 32px;"/> | x86_64 | [foundry-zksync-${{ needs.prepare.outputs.tag_name }}-x86_64-apple-darwin.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ needs.prepare.outputs.tag_name }}/${{ needs.prepare.outputs.tag_name }}-x86_64-apple-darwin.tar.gz) | 
          | <img src="https://simpleicons.org/icons/apple.svg" style="width: 32px;"/> | aarch64 | [foundry-zksync-${{ needs.prepare.outputs.tag_name }}-aarch64-apple-darwin.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ needs.prepare.outputs.tag_name }}/${{ needs.prepare.outputs.tag_name }}-aarch64-apple-darwin.tar.gz) |
          | | | | 
          ENDBODY
          )
          assets=()
          for asset in ./foundry-zksync-*.tar.gz; do
              assets+=("$asset/$asset")
          done
          tag_name="${{ needs.prepare.outputs.tag_name }}"
          echo "$body" | gh release create "$tag_name" "${assets[@]}" --draft -F "-" -t "foundry-zksync@$tag_name"
