name: Stable Release

on:
  push:
    tags:
      - "v*.*.*"
  schedule:
    # Stable releases: Every Sunday at midnight UTC
    # - cron: "0 0 * * SUN"
    - cron: "15 16 * * WED"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare:
    name: Prepare Stable Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      release_name: ${{ steps.release_info.outputs.release_name }}
      changelog: ${{ steps.build_changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine release type
        id: release_type
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            schedule_cron="${{ github.event.schedule }}"
            # Ensure the correct cron for stable releases
            if [[ "$schedule_cron" == "15 16 * * WED" ]]; then
              echo "release_type=stable" >> $GITHUB_OUTPUT
            else
              echo "release_type=unknown" >> $GITHUB_OUTPUT
              exit 1
            fi
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "release_type=tag" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "release_type=manual" >> $GITHUB_OUTPUT
          else
            echo "release_type=unknown" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Compute release name and tag
        id: release_info
        run: |
          RELEASE_TYPE="${{ steps.release_type.outputs.release_type }}"
          if [[ "$RELEASE_TYPE" == "manual" || "$RELEASE_TYPE" == "tag" ]]; then
            echo "tag_name=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
            echo "release_name=foundry-zksync@${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          elif [[ "$RELEASE_TYPE" == "stable" ]]; then
            # Fetch the latest stable tag
            latest_tag=$(git tag --list 'v*.*.*' | sort -V | tail -n1)
            echo "Latest stable tag: $latest_tag"
            # Extract version numbers
            IFS='.' read -r major minor patch <<< "${latest_tag#v}"
            # Increment patch version
            patch=$((patch + 1))
            new_tag="v$major.$minor.$patch"
            echo "tag_name=$new_tag" >> $GITHUB_OUTPUT
            echo "release_name=foundry-zksync@$new_tag" >> $GITHUB_OUTPUT
          else
            echo "Invalid release type." >&2
            exit 1
          fi

      - name: Create stable tag and update latest
        if: ${{ steps.release_type.outputs.release_type == 'stable' || steps.release_type.outputs.release_type == 'tag' || steps.release_type.outputs.release_type == 'manual' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.release_info.outputs.tag_name }}
          git push origin ${{ steps.release_info.outputs.tag_name }}
          # Update the 'latest' tag to point to the new stable release
          git tag -f latest ${{ steps.release_info.outputs.tag_name }}
          git push origin latest -f

      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: "./.github/changelog.json"
          fromTag: "v*.*.*"
          toTag: ${{ steps.release_info.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release ${{ matrix.target }} (${{ matrix.runner }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 240
    needs: prepare
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: buildjet-16vcpu-ubuntu-2204
            target: x86_64-unknown-linux-gnu
            svm_target_platform: linux-amd64
            platform: linux
            arch: amd64
          - runner: buildjet-16vcpu-ubuntu-2204
            target: aarch64-unknown-linux-gnu
            svm_target_platform: linux-aarch64
            platform: linux
            arch: arm64
        #   - runner: macos-latest
        #     target: x86_64-apple-darwin
        #     svm_target_platform: macosx-amd64
        #     platform: darwin
        #     arch: amd64
        #   - runner: macos-latest
        #     target: aarch64-apple-darwin
        #     svm_target_platform: macosx-aarch64
        #     platform: darwin
        #     arch: arm64
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install required Rust targets
        run: rustup target add ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          cache-on-failure: true
      - name: Apple M1 setup
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          brew install make
          echo "PATH=/usr/local/opt/make/libexec/gnubin:$PATH" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: Apple Darwin
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          brew install make
          echo "PATH=/usr/local/opt/make/libexec/gnubin:$PATH" >> $GITHUB_ENV
      - name: Linux ARM setup
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "C_INCLUDE_PATH=/usr/aarch64-linux-gnu/include" >> $GITHUB_ENV
          echo "CPLUS_INCLUDE_PATH=/usr/aarch64-linux-gnu/include" >> $GITHUB_ENV

      - name: Build binaries
        env:
          SVM_TARGET_PLATFORM: ${{ matrix.svm_target_platform }}
        shell: bash
        run: |
          set -eo pipefail
          target="${{ matrix.target }}"
          flags=()
          cargo build --release --bin forge --bin cast --target "$target" "${flags[@]}"
          bins=(cast forge)
          for name in "${bins[@]}"; do
              bin=./target/$target/release/$name
              file "$bin" || true
              ldd "$bin" || true
              $bin --version || true
          done

      - name: Archive binaries
        id: artifacts
        env:
          PLATFORM_NAME: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
          ARCH: ${{ matrix.arch }}
        shell: bash
        run: |
          VERSION_NAME="${{ needs.prepare.outputs.tag_name }}"
          if [[ "$VERSION_NAME" == nightly* ]]; then
            VERSION_NAME="nightly"
          fi

          if [ "$PLATFORM_NAME" == "linux" ]; then
              tar -czvf "foundry_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release forge cast
              echo "file_name=foundry_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" >> $GITHUB_OUTPUT
          elif [ "$PLATFORM_NAME" == "darwin" ]; then
              # Use gtar to avoid archive corruption
              brew install gnu-tar
              gtar -czvf "foundry_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release forge cast
              echo "file_name=foundry_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" >> $GITHUB_OUTPUT
          fi

      - name: Build man page
        id: man
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        env:
          PLATFORM_NAME: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
        shell: bash
        run: |
          VERSION_NAME="${{ needs.prepare.outputs.tag_name }}"
          if [[ "$VERSION_NAME" == nightly* ]]; then
            VERSION_NAME="nightly"
          fi

          sudo apt-get -y install help2man
          help2man -N ./target/${TARGET}/release/forge > forge.1
          help2man -N ./target/${TARGET}/release/cast > cast.1
          gzip forge.1
          gzip cast.1
          tar -czvf "foundry_man_${VERSION_NAME}.tar.gz" forge.1.gz cast.1.gz
          echo "foundry_man=foundry_man_${VERSION_NAME}.tar.gz" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.prepare.outputs.release_name }}
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          prerelease: false
          body: ${{ needs.prepare.outputs.changelog }}
          files: |
            ${{ steps.artifacts.outputs.file_name }}
            ${{ steps.man.outputs.foundry_man }}

      - name: Update Latest Release
        if: startsWith(needs.prepare.outputs.tag_name, 'v')
        uses: softprops/action-gh-release@v1
        with:
          name: "Latest foundry-zksync"
          tag_name: "latest"
          prerelease: false
          body: ${{ needs.prepare.outputs.changelog }}
          files: |
            ${{ steps.artifacts.outputs.file_name }}
            ${{ steps.man.outputs.foundry_man }}

  retry-on-failure:
    name: Retry on Failure
    if: failure() && fromJSON(github.run_attempt) < 3
    needs: release
    runs-on: ubuntu-latest
    steps:
      - env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: gh workflow run stable-release.yml -F run_id=${{ github.run_id }}

  cleanup:
    name: Release Cleanup
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: release
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Delete old stable tags (optional)
        run: |
          # Add any cleanup logic here if necessary
          echo "Cleanup completed."
